[{"name":"app.R","content":"#-------------------------------------------------\n# Rnssp Anomaly Detection Algorithms \n# Serverless WebAssembly App using Rnssp-wasm\n#\n# Atlanta, April 2024\n# Author: G. Roseric Azondekon \n#\n#-------------------------------------------------\n\n# Install the Rnssp package for webr\nwebr::install(\n  \"Rnssp\",\n  repos = c(\"https://cdcgov.github.io/Rnssp-wasm\", \"https://repo.r-wasm.org\")\n)\n\nlibrary(Rnssp)\n\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(shinycssloaders)\nlibrary(stringr)\nlibrary(ggplot2)\n\n\n# UI widgets\nui <- fluidPage(\n  tags$head(tags$style(\"#tbl {white-space: nowrap;}\")),\n  # Application title\n  titlePanel(\"Rnssp Anomaly Detection Algorithms\"),\n  \n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\n        \"detector\", \n        \"Select a Detector:\", \n        c(\"EWMA\", \"Adaptive Multiple Regression\", \"EWMA/Regression Switch\",\n          \"Negative Binomial\", \"Serfling\", \"Farrington\"), \n        \"EWMA\"\n      ),\n      conditionalPanel(\n        condition = \"input.detector == 'EWMA' | input.detector == 'EWMA/Regression Switch'\",\n        selectInput(\"a_column\", \"Select a count or percent\", c(\"count\", \"percent\"), \"count\"),\n        numericInput(\"a_B\", \"Number of days used to calculate rolling averages (B):\", 28, min = 7),\n        numericInput(\"a_g\", \"Number of guardband days (g):\", 2, min = 1),\n        numericInput(\"a_w1\", \"Smoothing coefficient for sensitivity to gradual events (w1):\", 0.4, min = 0, max = 1, step = 0.1),\n        numericInput(\"a_w2\", \"Smoothed coefficient for sensitivity to sudden events (w2):\", 0.9, min = 0, max = 1, step = 0.1)\n      ),\n      conditionalPanel(\n        condition = \"input.detector == 'Adaptive Multiple Regression'\",\n        selectInput(\"b_column\", \"Select a count or percent\", c(\"count\", \"percent\"), \"count\"),\n        numericInput(\"b_B\", \"Number of days used to calculate rolling averages (B):\", 28, min = 7),\n        numericInput(\"b_g\", \"Number of guardband days (g):\", 2, min = 1)\n      ),\n      conditionalPanel(\n        condition = \"input.detector == 'Serfling'\",\n        selectInput(\"s_scenario\", \"Select a scenario\", unique(simulated_data$id), \"Scenario #1\"),\n        dateInput(\"s_baseline_end\", \"End of the baseline/training period\", value = as.Date(\"2021-12-26\"), min = as.Date(\"2017-01-01\"), max = as.Date(\"2022-12-25\"))\n      ),\n      conditionalPanel(\n        condition = \"input.detector == 'Negative Binomial'\",\n        selectInput(\"nb_scenario\", \"Select a scenario\", unique(simulated_data$id), \"Scenario #1\"),\n        dateInput(\"nb_baseline_end\", \"End of the baseline/training period\", value = as.Date(\"2021-12-26\"), min = as.Date(\"2017-01-01\"), max = as.Date(\"2022-12-25\")),\n        checkboxInput(\"includeTime\", label = \"Include Time Term?\" , value = TRUE)\n      ),\n      conditionalPanel(\n        condition = \"input.detector == 'Farrington'\",\n        selectInput(\"f_scenario\", \"Select a scenario\", unique(simulated_data$id), \"Scenario #1\"),\n        radioButtons(\"method\", \"Farring Method:\", c(\"Original\" = \"original\", \"Modified\" = \"modified\")),\n        numericInput(\"f_B\", \"Number of years to include in baseline (B):\", 4, min = 1),\n        numericInput(\"f_g\", \"Number of guardband weeks (g):\", 27, min = 2),\n        numericInput(\"f_w\", \"Number of weeks included in reference window (w):\", 3, min = 1),\n        numericInput(\"f_p\", \"Number of seasonal periods for each year in baseline (p):\", 10, min = 1),\n      ),\n    ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      tabsetPanel(\n        id = \"tabs\",\n        tabPanel(\n          title = \"Plot\",\n          value = \"plot\",\n          useShinyjs(),\n          fluidRow(\n            column(\n              width = 12,\n              withSpinner(plotOutput(\"outputPlot\"))\n            )\n          )\n        ),\n        tabPanel(\n          title = \"Original Data\",\n          value = \"originalData\",\n          useShinyjs(),\n          fluidRow(\n            column(\n              width = 12,\n              withSpinner(dataTableOutput(\"originalTable\"))\n            )\n          )\n        ),\n        tabPanel(\n          title = \"Processed Data\",\n          value = \"processedData\",\n          useShinyjs(),\n          fluidRow(\n            column(\n              width = 12,\n              withSpinner(dataTableOutput(\"processedTable\"))\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  useShinyjs()\n  \n  data_list <- reactiveValues()\n  \n  # Get selected data\n  selected_data <- reactive({\n    if(input$detector %in% c(\"EWMA\", \"Adaptive Multiple Regression\", \"EWMA/Regression Switch\")){\n      date <- seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2020-12-31\"), by = 1)\n      count <- pmax(0, round(seq(30, 70, length.out = length(date))) + rnorm(length(date), mean = 0, sd = 10))\n      # count[count < 0] <- 0 # Ensure counts are non-negative\n      percent <- pmax(0, pmin(1, seq(0.2, 0.8, length.out = length(date)) + rnorm(length(date), mean = 0, sd = 0.1)))\n      data.frame(date = date, count = count, percent = percent)\n    } else if(input$detector == \"Serfling\") {\n      simulated_data %>% \n        filter(id == input$s_scenario)\n    } else if(input$detector == \"Negative Binomial\") {\n      simulated_data %>% \n        filter(id == input$nb_scenario)\n    } else {\n      simulated_data %>% \n        filter(id == input$f_scenario)\n    }\n  })\n  \n  # Send data to UI\n  output$originalTable <- renderDT(\n    selected_data() %>% \n      mutate_if(is.numeric, round, digits = 4),\n    # extensions = c(\"Buttons\", \"KeyTable\"),\n    options = list(\n      keys = FALSE,\n      paging = FALSE,\n      pageLength = 200,\n      scrollX = TRUE,\n      scrollY = \"400px\",\n      searching = FALSE,\n      # fixedColumns = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE,\n      dom = \"Bfrltip\"\n      # ,buttons = c(\"copy\", \"csv\", \"excel\")\n    )\n  )\n  \n  \n  processed_data <- reactive(\n    switch(\n      input$detector,\n      \"EWMA\" = alert_ewma(\n        selected_data(), \n        y = input$a_column, \n        B = input$a_B, \n        g = input$a_g, \n        w1 = input$a_w1, \n        w2 = input$a_w2\n      ),\n      \"EWMA/Regression Switch\" = alert_switch(\n        selected_data(), \n        y = input$a_column, \n        B = input$a_B, \n        g = input$a_g, \n        w1 = input$a_w1, \n        w2 = input$a_w2\n      ),\n      \"Adaptive Multiple Regression\" = alert_regression(\n        selected_data(), \n        y = input$b_column, \n        B = input$b_B, \n        g = input$b_g\n      ),\n      \"Serfling\" = alert_serfling(\n        selected_data(),\n        y = cases,\n        baseline_end = input$s_baseline_end\n      ),\n      \"Negative Binomial\" = alert_nbinom(\n        selected_data(),\n        y = cases,\n        include_time = input$includeTime,\n        baseline_end = input$nb_baseline_end\n      ),\n      \"Farrington\" = alert_farrington(\n        selected_data(), \n        y = cases, \n        B = input$f_B, \n        g = input$f_g, \n        w = input$f_w, \n        p = input$f_p, \n        method = input$method\n      )\n    )\n  )\n  \n  output$processedTable <- renderDT(\n    processed_data() %>% \n      mutate_if(is.numeric, round, digits = 4),\n    # extensions = c(\"Buttons\", \"KeyTable\"),\n    options = list(\n      keys = FALSE,\n      paging = FALSE,\n      pageLength = 200,\n      scrollX = TRUE,\n      scrollY = \"400px\",\n      searching = FALSE,\n      # fixedColumns = TRUE,\n      autoWidth = TRUE,\n      ordering = TRUE,\n      dom = \"Bfrltip\"\n      # ,buttons = c(\"copy\", \"csv\", \"excel\")\n    ) \n  )\n  \n  \n  output$outputPlot <- renderPlot({\n    switch(\n      input$detector,\n      \"EWMA\" = processed_data() %>% \n        ggplot() +\n        geom_line(aes(x = date, y = !!as.symbol(input$a_column)), color = \"grey70\") +\n        geom_line(\n          data = subset(processed_data(), alert != \"grey\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"blue\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"yellow\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"yellow\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"red\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"red\"\n        ) +\n        theme_bw() +\n        labs(\n          x = \"Date\",\n          y = str_to_title(input$a_column)\n        ),\n      \"EWMA/Regression Switch\" = processed_data() %>% \n        ggplot() +\n        geom_line(aes(x = date, y = !!as.symbol(input$a_column)), color = \"grey70\") +\n        geom_line(\n          data = subset(processed_data(), alert != \"grey\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"blue\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"yellow\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"yellow\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"red\"),\n          aes(x = date, y = !!as.symbol(input$a_column)), color = \"red\"\n        ) +\n        theme_bw() +\n        labs(\n          x = \"Date\",\n          y = str_to_title(input$a_column)\n        ),\n      \"Adaptive Multiple Regression\" = processed_data() %>% \n        ggplot() +\n        geom_line(aes(x = date, y = !!as.symbol(input$b_column)), color = \"grey70\") +\n        geom_line(\n          data = subset(processed_data(), alert != \"grey\"),\n          aes(x = date, y = !!as.symbol(input$b_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"blue\"),\n          aes(x = date, y = !!as.symbol(input$b_column)), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"yellow\"),\n          aes(x = date, y = !!as.symbol(input$b_column)), color = \"yellow\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"red\"),\n          aes(x = date, y = !!as.symbol(input$b_column)), color = \"red\"\n        ) +\n        theme_bw() +\n        labs(\n          x = \"Date\",\n          y = str_to_title(input$b_column)\n        ),\n      \"Serfling\" = processed_data() %>% \n        ggplot() +\n        theme_classic() +\n        geom_line(aes(x = date, y = cases), linewidth = 0.3) +\n        geom_line(aes(x = date, y = estimate), color = \"blue\", linewidth = 0.3) +\n        geom_line(aes(x = date, y = threshold), color = \"red\", linewidth = 0.3,\n                  linetype = \"dashed\") +\n        geom_point(data = subset(processed_data(), alarm), aes(x = date, y = cases),\n                   color = \"red\", shape = 21, size = 2.5) +\n        geom_vline(xintercept = input$s_baseline_end, linewidth = 0.2) +\n        annotate(geom = \"text\", x = input$s_baseline_end - round((input$s_baseline_end - min(processed_data()$date))/2), y = round(max(processed_data()$cases) * 0.95), label = \"Baseline Data\") +\n        scale_color_manual(\n          values = c(\"blue\", \"red\"),\n          name = \"Series\"\n        ) +\n        scale_y_continuous(\n          # limits = c(0, 80),\n          # expand = c(0, 0),\n          name = \"Weekly Count\"\n        ) +\n        scale_x_date(\n          breaks = seq.Date(from = min(processed_data()$date), to = max(processed_data()$date), by = \"4 month\"),\n          name = \"MMWR Week Date\"\n        ) +\n        theme(\n          axis.text.x = element_text(angle = 90, vjust = 0.5),\n          axis.ticks.length = unit(0.25, \"cm\")\n        ) +\n        theme(\n          legend.position = \"bottom\",\n          axis.ticks.length = unit(0.25, \"cm\"),\n          legend.background = element_rect(color = \"black\", linewidth = 0.1)\n        ) +\n        labs(\n          title = paste(\"Original Serfling Method Results for Simulated Time Series\", gsub(\"Scenario \", \"\", input$s_scenario)),\n          subtitle = \"Annual seasonality with moderate counts\"\n        ),\n      \"Negative Binomial\" = processed_data() %>% \n        ggplot() +\n        theme_classic() +\n        geom_line(aes(x = date, y = cases), linewidth = 0.3) +\n        geom_line(aes(x = date, y = estimate), color = \"blue\", linewidth = 0.3) +\n        geom_line(aes(x = date, y = threshold), color = \"red\", linewidth = 0.3,\n                  linetype = \"dashed\") +\n        geom_point(data = subset(processed_data(), alarm), aes(x = date, y = cases),\n                   color = \"red\", shape = 21, size = 2.5) +\n        geom_vline(xintercept = input$nb_baseline_end, linewidth = 0.2) +\n        annotate(geom = \"text\", x = input$nb_baseline_end - round((input$nb_baseline_end - min(processed_data()$date))/2), y = round(max(processed_data()$cases) * 0.95), label = \"Baseline Data\") +\n        scale_y_continuous(\n          # limits = c(0, 80),\n          # expand = c(0, 0),\n          name = \"Weekly Count\"\n        ) +\n        scale_x_date(\n          breaks = seq.Date(from = min(processed_data()$date), to = max(processed_data()$date), by = \"4 month\"),\n          name = \"MMWR Week Date\"\n        ) +\n        theme(\n          axis.text.x = element_text(angle = 90, vjust = 0.5),\n          axis.ticks.length = unit(0.25, \"cm\")\n        ) +\n        labs(\n          title = paste(\"Negative Binomial Regression Algorithm Results for Simulated Time Series\", gsub(\"Scenario \", \"\", input$nb_scenario)),\n          subtitle = \"Annual seasonality with moderate counts\"\n        ),\n      \"Farrington\" = processed_data() %>% \n        ggplot() +\n        geom_line(aes(x = date, y = cases), linewidth = 0.4, color = \"grey70\") +\n        geom_line(\n          data = subset(processed_data(), alert != \"grey\"),\n          aes(x = date, y = cases), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"blue\"),\n          aes(x = date, y = cases), color = \"navy\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"yellow\"),\n          aes(x = date, y = cases), color = \"yellow\"\n        ) +\n        geom_point(\n          data = subset(processed_data(), alert == \"red\"),\n          aes(x = date, y = cases), color = \"red\"\n        ) +\n        theme_bw() +\n        labs(\n          x = \"Date\",\n          y = \"Weekly ED Visits\"\n        )\n    )\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)  #%>% suppressWarnings()\n","type":"text"}]
